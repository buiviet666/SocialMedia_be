const reportService = require('../services/report.service');

// üìå B√°o c√°o ng∆∞·ªùi d√πng
exports.reportUser = async (req, res, next) => {
  try {
    const { targetUserId: targetId, reason } = req.body;
    if (!targetId || !reason) return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu' });

    const reporter = req.user._id;
    const isDuplicate = await reportService.checkDuplicate(reporter, 'USER', targetId);
    if (isDuplicate) {
      return res.status(409).json({ message: 'B·∫°n ƒë√£ b√°o c√°o ng∆∞·ªùi d√πng n√†y tr∆∞·ªõc ƒë√≥.' });
    }

    const report = await reportService.createReport({
      reporter,
      targetType: 'USER',
      targetId: targetId,
      reason,
    });

    res.status(201).json({ success: true, message: 'ƒê√£ b√°o c√°o ng∆∞·ªùi d√πng', data: report });
  } catch (err) {
    next(err);
  }
};

// üìå B√°o c√°o b√†i vi·∫øt
exports.reportPost = async (req, res, next) => {
  try {
    const { postId: targetId, reason } = req.body;
    if (!targetId || !reason) return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu' });

    const reporter = req.user._id;
    const isDuplicate = await reportService.checkDuplicate(reporter, 'POST', targetId);
    if (isDuplicate) {
      return res.status(409).json({ message: 'B·∫°n ƒë√£ b√°o c√°o b√†i vi·∫øt n√†y tr∆∞·ªõc ƒë√≥.' });
    }

    const report = await reportService.createReport({
      reporter,
      targetType: 'POST',
      targetId,
      reason,
    });

    res.status(201).json({ success: true, message: 'ƒê√£ b√°o c√°o b√†i vi·∫øt', data: report });
  } catch (err) {
    next(err);
  }
};

// üìå B√°o c√°o b√¨nh lu·∫≠n
exports.reportComment = async (req, res, next) => {
  try {
    const { commentId: targetId, reason } = req.body;
    if (!targetId || !reason) return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu' });

    const reporter = req.user._id;
    const isDuplicate = await reportService.checkDuplicate(reporter, 'COMMENT', targetId);
    if (isDuplicate) {
      return res.status(409).json({ message: 'B·∫°n ƒë√£ b√°o c√°o b√¨nh lu·∫≠n n√†y tr∆∞·ªõc ƒë√≥.' });
    }

    const report = await reportService.createReport({
      reporter,
      targetType: 'COMMENT',
      targetId,
      reason,
    });

    res.status(201).json({ success: true, message: 'ƒê√£ b√°o c√°o b√¨nh lu·∫≠n', data: report });
  } catch (err) {
    next(err);
  }
};

// üìå B√°o c√°o tin nh·∫Øn
exports.reportMessage = async (req, res, next) => {
  try {
    const { messageId: targetId, reason } = req.body;
    if (!targetId || !reason) return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu' });

    const reporter = req.user._id;
    const isDuplicate = await reportService.checkDuplicate(reporter, 'MESSAGE', targetId);
    if (isDuplicate) {
      return res.status(409).json({ message: 'B·∫°n ƒë√£ b√°o c√°o tin nh·∫Øn n√†y tr∆∞·ªõc ƒë√≥.' });
    }

    const report = await reportService.createReport({
      reporter,
      targetType: 'MESSAGE',
      targetId,
      reason,
    });

    res.status(201).json({ success: true, message: 'ƒê√£ b√°o c√°o tin nh·∫Øn', data: report });
  } catch (err) {
    next(err);
  }
};
